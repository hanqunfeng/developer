package org.pyf.developer.bean.one.model.auth;

// Generated 2009-5-14 15:29:56 by Hibernate Tools 3.2.4.GA

import com.alibaba.fastjson.annotation.JSONField;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.i18n.LocaleContextHolder;

import javax.persistence.*;
import java.util.Date;
import java.util.Set;

/**
 * SystemRole generated by hbm2java
 */

@Entity
@Table(name = "TBL_CP_ROLE", schema = "cp2015db")
@Lazy(value=true)
public class SystemRole implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5163109892070354874L;

	@Id
	@Column(name="ROLE_ID")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;
	
	@Column(name="ROLE_NAME")
	private String name;
	
	@Column(name="ROLE_NAME_EN")
	private String nameEn;
	
	@Column(name="ROLE_DESCRIPTION")
	private String description;

	@Column(name="ROLE_DATE")
	private Date lastupdate;
	
	@Column(name="ROLE_RESERVED")
	private boolean reserved;
	
	@ManyToMany(mappedBy="roles",cascade={CascadeType.DETACH},fetch=FetchType.LAZY)
	@JSONField(serialize=false)//在返回json的时候对该属性不进行序列化
	private Set<SystemUser> users;

	
	@ManyToMany(cascade={CascadeType.DETACH},fetch=FetchType.LAZY)
	@JoinTable(name="TBL_CP_ROLEAUTHORITY",joinColumns={@JoinColumn(name="ROAU_ROLE_ID_FK")},inverseJoinColumns={@JoinColumn(name="ROAU_AUTH_ID_FK")})
	@OrderBy("order ASC")
	@JSONField(serialize=false)//在返回json的时候对该属性不进行序列化
	private Set<SystemAuthority> authorities;

	public String[] getAccessTypes() {
		return accessTypes;
	}

	public void setAccessTypes(String[] accessTypes) {
		this.accessTypes = accessTypes;
	}

	@Transient
	private String[] accessTypes;
	
	public String getNameEn() {
		return nameEn;
	}

	public void setNameEn(String nameEn) {
		this.nameEn = nameEn;
	}

	public String getShowName(){

		if(LocaleContextHolder.getLocale().getLanguage().equalsIgnoreCase("en")){
			return this.nameEn;
		}else{
			return this.name;
		}
	}

	public String getAuthoritysHtmlString() {
		if (CollectionUtils.isEmpty(authorities))
			return "";
		else
			return StringUtils.join(authorities, ",\r");
	}
	
	
	

	public SystemRole() {
	}

	public SystemRole(String name, Date lastupdate) {
		this.name = name;
		this.lastupdate = lastupdate;
	}

	public SystemRole(String name, String description, Date lastupdate) {
		this.name = name;
		this.description = description;
		this.lastupdate = lastupdate;
	}

	public Set<SystemAuthority> getAuthorities() {
		return authorities;
	}

	public String getDescription() {
		return this.description;
	}

	public Long getId() {
		return this.id;
	}

	public Date getLastupdate() {
		return this.lastupdate;
	}

	public String getName() {
		return this.name;
	}
	@JSONField(serialize=false)
	public Set<SystemUser> getUsers() {
		return users;
	}

	public boolean isReserved() {
		return reserved;
	}

	public void setAuthorities(Set<SystemAuthority> authorities) {
		this.authorities = authorities;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public void setLastupdate(Date lastupdate) {
		this.lastupdate = lastupdate;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setReserved(boolean reserved) {
		this.reserved = reserved;
	}

	public void setUsers(Set<SystemUser> users) {
		this.users = users;
	}

	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 37).append(id).append(name)
				.toHashCode();
	}

	@Override
	public boolean equals(Object o) {
		boolean equals = false;
		if (o != null && o instanceof SystemRole) {
			SystemRole sr = (SystemRole)o;
			equals = (new EqualsBuilder().append(id, sr.getId())
					.append(name,sr.getName())).isEquals();
		}
		return equals;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return name;
	}
	
	
	
}
