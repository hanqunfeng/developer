package org.pyf.developer.bean.one.model.auth;

// Generated 2009-5-14 15:29:56 by Hibernate Tools 3.2.4.GA

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.i18n.LocaleContextHolder;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;


/**
 * SystemAuthority generated by hbm2java
 */

@Entity
@Table(name ="TBL_CP_AUTHORITY", schema = "cp2015db")
@Lazy(value=true)
public class SystemAuthority implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4417512323453545100L;
	
	@Id
	@Column(name="AUTH_ID")
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;
	

	@Column(name="AUTH_NAME")
	private String name;
	
	
	@Column(name="AUTH_NAME_En")
	private String nameEn;
	
	@Column(name="AUTH_ENTRANCE")
	private String entrance;
	
	@Column(name="AUTH_DESCRIPTION")
	private String description;
	
	
	@Column(name="AUTH_DATE")
	private Date lastupdate;
	
	
	@Column(name="AUTH_ORDER")
	private Integer order;
	
	@Column(name="AUTH_RESERVED")
	private boolean reserved;
	
	@OneToMany(cascade=CascadeType.ALL,fetch=FetchType.LAZY)
	@JoinColumn(name="URRE_AUTH_ID_FK",updatable=false)
	private Set<SystemUrlResource> resources;
	
	@ManyToMany(mappedBy="authorities", cascade=CascadeType.ALL,fetch=FetchType.LAZY)
	private Set<SystemRole> roles;

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Column(name = "AUTH_CODE")
	private String code;

	@Transient
	private String showNameRole;

	public String getShowNameRole() {
		return StringUtils.defaultIfEmpty(name, "") + "--"
				+ StringUtils.defaultIfEmpty(entrance, "");
	}

	public SystemAuthority() {
	}

	public SystemAuthority(String name, Date lastupdate) {
		this.name = name;
		this.lastupdate = lastupdate;
	}
	
	public SystemAuthority(String name, String entrance, String description,
			Date lastupdate) {
		this.name = name;
		this.entrance = entrance;
		this.description = description;
		this.lastupdate = lastupdate;
	}
	

	public void addResource(SystemUrlResource resource) {
		if (this.resources == null)
			resources = new HashSet<SystemUrlResource>();
		resources.add(resource);
	}

	public String getDescription() {
		return this.description;
	}

	public String getEntrance() {
		return this.entrance;
	}

	public Long getId() {
		return this.id;
	}

	public Date getLastupdate() {
		return this.lastupdate;
	}

	public String getName() {
		return this.name;
	}

	public String getNameEn() {
		return nameEn;
	}

	public Integer getOrder() {
		return order;
	}

	public String getResourceHtmlString() {
		if (CollectionUtils.isEmpty(resources))
			return "";
		else
			return StringUtils.join(resources, ",\r");
	}

	public Set<SystemUrlResource> getResources() {
		return resources;
	}

	public Set<SystemRole> getRoles() {
		return roles;
	}

	public String getShowName(){
		if(LocaleContextHolder.getLocale().getLanguage().equalsIgnoreCase("en")){
			return this.nameEn;
		}else{
			return this.name;
		}
	}

	public boolean isReserved() {
		return reserved;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setEntrance(String entrance) {
		this.entrance = entrance;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public void setLastupdate(Date lastupdate) {
		this.lastupdate = lastupdate;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setNameEn(String nameEn) {
		this.nameEn = nameEn;
	}

	public void setOrder(Integer order) {
		this.order = order;
	}

	public void setReserved(boolean reserved) {
		this.reserved = reserved;
	}

	public void setResources(Set<SystemUrlResource> resources) {
		this.resources = resources;
	}

	public void setRoles(Set<SystemRole> roles) {
		this.roles = roles;
	}

	public void setUrls(String urls) {
		if (StringUtils.isNotBlank(urls)) {
			String tmp = StringUtils.replace(urls, "\r", ",").replaceAll("\n",
					",");
			String[] tmpAry = StringUtils.split(tmp, ',');
			if (!ArrayUtils.isEmpty(tmpAry)) {
				for (String url : tmpAry) {
					SystemUrlResource resource = new SystemUrlResource();
					resource.setUrlPattern(url);
					resource.setAuthority(this);
					addResource(resource);
				}
			}
		}
	}

	public String toString() {
		return StringUtils.defaultIfEmpty(name, "") + "--"
				+ StringUtils.defaultIfEmpty(entrance, "");
	}
}
